trigger:
- main

pool:
  vmImage: 'ubuntu-latest'
variables:
- name: DEV_ENVIRONMENT
  value: dev


stages:
  - stage: TerraformValidate
    jobs:
      - job: TerraformValidateJob
        continueOnError: false
        steps:
        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: '$(System.DefaultWorkingDirectory)/Terraform Manifest'
            artifact: 'Terraform Manifest-out'
            publishLocation: 'pipeline'
        - task: TerraformInstaller@0
          displayName: Terraform Install
          inputs:
                terraformVersion: 'latest'
        - task: TerraformTaskV3@3
          displayName: Terraform Init 
          inputs: 
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform Manifest'
            backendType: 'azurerm'
            backendServiceArm: 'terraform-aks-azurerm-svc-con'
            backendAzureRmResourceGroupName: 'Storage'
            backendAzureRmStorageAccountName: 'tfstatesyed'
            backendAzureRmContainerName: 'tfstate-2'
            backendAzureRmKey: 'terraform.tfstate'
        - task: TerraformTaskV3@3
          displayName: Terraform Validate
          inputs:
            provider: 'azurerm'
            command: 'validate'
            workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform Manifest'
            allowTelemetryCollection: false
            

  - stage: DeployAKSClusters
    jobs:
      - deployment: DeployDevAKSCluster
        displayName: DeployDevAKSCluster
        pool:
          vmImage: 'ubuntu-latest'
        environment: $(DEV_ENVIRONMENT)
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadSecureFile@1
                  displayName: Download SSH Key
                  name: sshkey
                  inputs:
                    secureFile: 'ssh-key.pub'
                - task: TerraformTaskV3@3
                  displayName: Terraform Init
                  inputs:
                    provider: 'azurerm'
                    command: 'init'
                    workingDirectory: '$(Pipeline.Workspace)/Terraform Manifest-out'
                    backendType: 'azurerm'
                    backendServiceArm: 'terraform-aks-azurerm-svc-con'
                    backendAzureRmResourceGroupName: 'Storage'
                    backendAzureRmStorageAccountName: 'tfstatesyed'
                    backendAzureRmContainerName: 'tfstate-2'
                    backendAzureRmKey: 'aks-$(DEV_ENVIRONMENT).tfstate'
                    allowTelemetryCollection: false
                - task: TerraformTaskV3@3
                  displayName: Terraform Plan
                  inputs:
                    provider: 'azurerm'
                    command: 'plan'
                    workingDirectory: '$(Pipeline.Workspace)/Terraform Manifest-out'
                    commandOptions: '-var ssh_public_key=$(sshkey.secureFilePath) -var environment=$(DEV_ENVIRONMENT) -out $(Pipeline.Workspace)/Terraform Manifest-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
                    environmentServiceNameAzureRM: 'terraform-aks-azurerm-svc-con'
                    allowTelemetryCollection: false
                - task: TerraformTaskV3@3
                  displayName: Terraform Apply
                  inputs:
                    provider: 'azurerm'
                    command: 'apply'
                    workingDirectory: '$(Pipeline.Workspace)/Terraform Manifest-out'
                    commandOptions: '$(Pipeline.Workspace)/Terraform Manifest-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
                    environmentServiceNameAzureRM: 'terraform-aks-azurerm-svc-con'
